// <auto-generated />
using CLM.Data;
using CLM.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace CLM.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180525114934_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CLM.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CLM.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Last");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("MemberSince");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImageUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CLM.Models.Arqueo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("Cheque");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Efectivo");

                    b.Property<int>("OficinaId");

                    b.Property<int>("ResultadoEjercicio");

                    b.Property<int>("Saldo");

                    b.Property<int>("Transferencia");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OficinaId");

                    b.ToTable("Arqueo");
                });

            modelBuilder.Entity("CLM.Models.Cliente", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Address");

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ClaveFE");

                    b.Property<string>("ClaveSII");

                    b.Property<int>("ComunaId");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaIngreso");

                    b.Property<int?>("Laborales");

                    b.Property<int?>("Mensuales");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("NoCliente");

                    b.Property<string>("Phone");

                    b.Property<int?>("Renta");

                    b.Property<int?>("Retencion");

                    b.Property<double>("SaldosPendientes");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ComunaId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("CLM.Models.Cobro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Honorario");

                    b.Property<int>("Monto");

                    b.Property<int>("ValeId");

                    b.HasKey("Id");

                    b.HasIndex("ValeId");

                    b.ToTable("Cobro");
                });

            modelBuilder.Entity("CLM.Models.Comuna", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CS");

                    b.Property<int>("DE");

                    b.Property<string>("Name");

                    b.Property<int>("ProvinciaId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Comuna");
                });

            modelBuilder.Entity("CLM.Models.Giro", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Giro");
                });

            modelBuilder.Entity("CLM.Models.GirosCliente", b =>
                {
                    b.Property<int>("ClienteId");

                    b.Property<int>("GiroId");

                    b.HasKey("ClienteId", "GiroId");

                    b.HasIndex("GiroId");

                    b.ToTable("GirosCliente");
                });

            modelBuilder.Entity("CLM.Models.Oficina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Oficina");
                });

            modelBuilder.Entity("CLM.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("ClienteId");

                    b.Property<int?>("ClienteId1");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("FechaTransferencia");

                    b.Property<int>("Medio");

                    b.Property<int>("Monto");

                    b.Property<int>("OficinaId");

                    b.Property<int?>("OficinaId1");

                    b.Property<int>("RutTransferencia");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClienteId1");

                    b.HasIndex("OficinaId");

                    b.HasIndex("OficinaId1");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("CLM.Models.Provincia", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<int>("Population");

                    b.Property<int>("RegionId");

                    b.Property<int>("Surface");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("CLM.Models.PuestoTrabajo", b =>
                {
                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("OficinaId");

                    b.HasKey("ApplicationUserId", "OficinaId");

                    b.HasIndex("OficinaId");

                    b.ToTable("PuestoTrabajo");
                });

            modelBuilder.Entity("CLM.Models.Region", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<int>("Pop2002");

                    b.Property<int>("Pop2010");

                    b.Property<int>("Surface");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("CLM.Models.Retiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Detalles");

                    b.Property<int>("Forma");

                    b.Property<int>("Monto");

                    b.Property<int>("OficinaId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OficinaId");

                    b.ToTable("Retiro");
                });

            modelBuilder.Entity("CLM.Models.Vale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("ClienteId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Pagado");

                    b.Property<int>("State");

                    b.Property<int>("SubTotal");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Vale");
                });

            modelBuilder.Entity("CLM.Models.ValePago", b =>
                {
                    b.Property<int>("ValeId");

                    b.Property<int>("PagoId");

                    b.HasKey("ValeId", "PagoId");

                    b.HasIndex("PagoId");

                    b.ToTable("ValePagos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationRoleId");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CLM.Models.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleAssigner");

                    b.ToTable("ApplicationUserRole");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("CLM.Models.Arqueo", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Arqueos")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CLM.Models.Oficina", "Oficina")
                        .WithMany("Arqueos")
                        .HasForeignKey("OficinaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.Cliente", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Clientes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CLM.Models.Comuna", "Comuna")
                        .WithMany("Clientes")
                        .HasForeignKey("ComunaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.Cobro", b =>
                {
                    b.HasOne("CLM.Models.Vale", "Vale")
                        .WithMany("Cobros")
                        .HasForeignKey("ValeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.Comuna", b =>
                {
                    b.HasOne("CLM.Models.Provincia", "Provincia")
                        .WithMany("Comunas")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.GirosCliente", b =>
                {
                    b.HasOne("CLM.Models.Cliente", "Cliente")
                        .WithMany("GirosCliente")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLM.Models.Giro", "Giro")
                        .WithMany("GirosClientes")
                        .HasForeignKey("GiroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.Pago", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Pagos")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CLM.Models.Cliente")
                        .WithMany("Pagos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CLM.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId1");

                    b.HasOne("CLM.Models.Oficina")
                        .WithMany("Pagos")
                        .HasForeignKey("OficinaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CLM.Models.Oficina", "Oficina")
                        .WithMany()
                        .HasForeignKey("OficinaId1");
                });

            modelBuilder.Entity("CLM.Models.Provincia", b =>
                {
                    b.HasOne("CLM.Models.Region", "Region")
                        .WithMany("Provincias")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.PuestoTrabajo", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PuestosTrabajo")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLM.Models.Oficina", "Oficina")
                        .WithMany("PuestosTrabajo")
                        .HasForeignKey("OficinaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.Retiro", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Retiros")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CLM.Models.Oficina", "Oficina")
                        .WithMany()
                        .HasForeignKey("OficinaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.Vale", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Vales")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CLM.Models.Cliente", "Cliente")
                        .WithMany("Vales")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLM.Models.ValePago", b =>
                {
                    b.HasOne("CLM.Models.Pago", "Pago")
                        .WithMany("Vales")
                        .HasForeignKey("PagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLM.Models.Vale", "Vale")
                        .WithMany("Pagos")
                        .HasForeignKey("ValeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CLM.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CLM.Models.ApplicationRole")
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("CLM.Models.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CLM.Models.ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLM.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CLM.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
